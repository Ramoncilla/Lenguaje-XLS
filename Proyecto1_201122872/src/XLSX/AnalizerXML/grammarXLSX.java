/* grammarXLSX.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. grammarXLSX.java */
package XLSX.AnalizerXML;
import java.util.ArrayList;
import java.util.List;

public class grammarXLSX/*@bgen(jjtree)*/implements grammarXLSXTreeConstants, grammarXLSXConstants {/*@bgen(jjtree)*/
  protected JJTgrammarXLSXState jjtree = new JJTgrammarXLSXState();

  final public SimpleNode Start() throws ParseException {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Inicio();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Inicio() throws ParseException {/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case encuesta:
        case opciones:
        case configuraciones:
        case encuesta2:
        case opciones2:
        case configuraciones2:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Archivo();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Archivo() throws ParseException {/*@bgen(jjtree) Archivo */
  SimpleNode jjtn000 = new SimpleNode(JJTARCHIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case encuesta:
      case encuesta2:{
        ENCUESTA();
        break;
        }
      case opciones:
      case opciones2:{
        OPCIONES();
        break;
        }
      case configuraciones:
      case configuraciones2:{
        CONFIGURACION();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

/*------------------------------------------ ENCUESTA -----------------------------*/
  final public 
void ENCUESTA() throws ParseException {/*@bgen(jjtree) ENCUESTA */
  SimpleNode jjtn000 = new SimpleNode(JJTENCUESTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ENCABEZADO_E();
      LISTA_PREGUNTAS();
      ENCABEZADO_E();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ENCABEZADO_ENCUESTA() throws ParseException {/*@bgen(jjtree) ENCABEZADO_ENCUESTA */
  SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_ENCUESTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ENCABEZADO_E();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ENCABEZADO_E() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case encuesta:{
        t = jj_consume_token(encuesta);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case encuesta2:{
        t = jj_consume_token(encuesta2);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LISTA_PREGUNTAS() throws ParseException {/*@bgen(jjtree) LISTA_PREGUNTAS */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_PREGUNTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case preg:
        case preg2:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        PREGUNTA();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PREGUNTA() throws ParseException {/*@bgen(jjtree) PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTPREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tENCABEZADO_PRE();
      L_OPT_PREGUNTA();
      tENCABEZADO_PRE();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void L_OPT_PREGUNTA() throws ParseException {/*@bgen(jjtree) L_OPT_PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTL_OPT_PREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case etiqueta:
        case sugerir:
        case codigo_pre:
        case codigo_post:
        case restringirMsn:
        case requeridoMsn:
        case predeterminado:
        case restringir:
        case aplicable:
        case calculo:
        case repeticion:
        case multimedia:
        case tipoC:
        case idPreguntaC:
        case requeridoC:
        case aparienciaC:
        case parametroC:
        case lecturaC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        OPT_PREGUNTA();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OPT_PREGUNTA() throws ParseException {/*@bgen(jjtree) OPT_PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTOPT_PREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tipoC:{
        tipo();
        break;
        }
      case idPreguntaC:{
        idPregunta();
        break;
        }
      case etiqueta:{
        etiqueta();
        break;
        }
      case sugerir:{
        Sugerir();
        break;
        }
      case codigo_pre:{
        codigo_pre();
        break;
        }
      case codigo_post:{
        codigo_post();
        break;
        }
      case restringirMsn:{
        restringirMsn();
        break;
        }
      case requeridoMsn:{
        requeridoMsn();
        break;
        }
      case predeterminado:{
        predeterminado();
        break;
        }
      case restringir:{
        restringir();
        break;
        }
      case aplicable:{
        aplicable();
        break;
        }
      case calculo:{
        calculo();
        break;
        }
      case repeticion:{
        repeticion();
        break;
        }
      case requeridoC:{
        requerido();
        break;
        }
      case lecturaC:{
        lectura();
        break;
        }
      case multimedia:{
        multimedia();
        break;
        }
      case aparienciaC:{
        apariencia();
        break;
        }
      case parametroC:{
        PARAMETROS();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void tipo() throws ParseException {/*@bgen(jjtree) tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(tipoC);
      TIPO_E();
      jj_consume_token(tipoC2);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void idPregunta() throws ParseException {/*@bgen(jjtree) idPregunta */
  SimpleNode jjtn000 = new SimpleNode(JJTIDPREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idPreguntaE();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void idPreguntaE() throws ParseException {/*@bgen(jjtree) idPreguntaE */
                                SimpleNode jjtn000 = new SimpleNode(JJTIDPREGUNTAE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(idPreguntaC);
      t = jj_consume_token(id);
      jj_consume_token(idPreguntaC2);
jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Sugerir() throws ParseException {/*@bgen(jjtree) Sugerir */
  SimpleNode jjtn000 = new SimpleNode(JJTSUGERIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      sugerirO();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void sugerirO() throws ParseException {/*@bgen(jjtree) sugerir */
                         SimpleNode jjtn000 = new SimpleNode(JJTSUGERIR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(sugerir);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image.replace("<sugerir>","").replace("</sugerir>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void codigo_pre() throws ParseException {/*@bgen(jjtree) codigo_pre */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_PRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      codPre();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void codPre() throws ParseException {/*@bgen(jjtree) codPre */
                      SimpleNode jjtn000 = new SimpleNode(JJTCODPRE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(codigo_pre);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image.replace("<codigo_pre>","").replace("</codigo_pre>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void codigo_post() throws ParseException {/*@bgen(jjtree) codigo_post */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_POST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      codPost();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void codPost() throws ParseException {/*@bgen(jjtree) codPost */
                        SimpleNode jjtn000 = new SimpleNode(JJTCODPOST);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(codigo_post);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image.replace("<codigo_post>","").replace("</codigo_post>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void restringirMsn() throws ParseException {/*@bgen(jjtree) restringirMsn */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTRINGIRMSN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      restrMsn();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void restrMsn() throws ParseException {/*@bgen(jjtree) restrMsn */
                          SimpleNode jjtn000 = new SimpleNode(JJTRESTRMSN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(restringirMsn);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.setName(t.image.replace("<restringirMsn>","").replace("</restringirMsn>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void requeridoMsn() throws ParseException {/*@bgen(jjtree) requeridoMsn */
  SimpleNode jjtn000 = new SimpleNode(JJTREQUERIDOMSN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      requeMsn();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void requeMsn() throws ParseException {/*@bgen(jjtree) requeMsn */
                          SimpleNode jjtn000 = new SimpleNode(JJTREQUEMSN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(requeridoMsn);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.setName(t.image.replace("<requeridoMsn>","").replace("</requeridoMsn>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void predeterminado() throws ParseException {/*@bgen(jjtree) predeterminado */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDETERMINADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      predeter();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void predeter() throws ParseException {/*@bgen(jjtree) predeter */
                          SimpleNode jjtn000 = new SimpleNode(JJTPREDETER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(predeterminado);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
jjtn000.setName(t1.image.replace("<predeterminado>","").replace("</predeterminado>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void restringir() throws ParseException {/*@bgen(jjtree) restringir */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTRINGIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      restrin();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void restrin() throws ParseException {/*@bgen(jjtree) restrin */
                        SimpleNode jjtn000 = new SimpleNode(JJTRESTRIN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(restringir);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t1.image.replace("<restringir>","").replace("</restringir>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void aplicable() throws ParseException {/*@bgen(jjtree) aplicable */
  SimpleNode jjtn000 = new SimpleNode(JJTAPLICABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      apli();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void apli() throws ParseException {/*@bgen(jjtree) apli */
                  SimpleNode jjtn000 = new SimpleNode(JJTAPLI);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(aplicable);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t1.image.replace("<aplicable>","").replace("</aplicable>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void calculo() throws ParseException {/*@bgen(jjtree) calculo */
  SimpleNode jjtn000 = new SimpleNode(JJTCALCULO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      calcu();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void calcu() throws ParseException {/*@bgen(jjtree) calcu */
                    SimpleNode jjtn000 = new SimpleNode(JJTCALCU);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(calculo);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t1.image.replace("<calculo>","").replace("</calculo>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void repeticion() throws ParseException {/*@bgen(jjtree) repeticion */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      repet();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void repet() throws ParseException {/*@bgen(jjtree) repet */
                    SimpleNode jjtn000 = new SimpleNode(JJTREPET);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(repeticion);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t1.image.replace("<repeticion>","").replace("</repeticion>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void requerido() throws ParseException {/*@bgen(jjtree) requerido */
  SimpleNode jjtn000 = new SimpleNode(JJTREQUERIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(requeridoC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case verdadero:
      case falso:
      case NUM:{
        TIPO_BOOL();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(requeridoC2);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void lectura() throws ParseException {/*@bgen(jjtree) lectura */
  SimpleNode jjtn000 = new SimpleNode(JJTLECTURA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(lecturaC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case verdadero:
      case falso:
      case NUM:{
        TIPO_BOOL();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(lecturaC2);
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void apariencia() throws ParseException {/*@bgen(jjtree) apariencia */
  SimpleNode jjtn000 = new SimpleNode(JJTAPARIENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(aparienciaC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case iniciar:
      case finalizar:
      case texto:
      case entero:
      case decimal:
      case rango:
      case condicion:
      case hora:
      case fecha:
      case fechahora:
      case selecciona_uno:
      case selecciona_multiples:
      case nota:
      case fichero:
      case calcular:
      case id:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case id:{
          ID();
          break;
          }
        case iniciar:
        case finalizar:
        case texto:
        case entero:
        case decimal:
        case rango:
        case condicion:
        case hora:
        case fecha:
        case fechahora:
        case selecciona_uno:
        case selecciona_multiples:
        case nota:
        case fichero:
        case calcular:{
          TIPO_E();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(aparienciaC2);
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ID() throws ParseException {/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identificador();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void identificador() throws ParseException {/*@bgen(jjtree) identificador */
                                    SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(id);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TIPO_E() throws ParseException {/*@bgen(jjtree) tipo */
                    SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case texto:{
        t1 = jj_consume_token(texto);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case entero:{
        t1 = jj_consume_token(entero);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case decimal:{
        t1 = jj_consume_token(decimal);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case rango:{
        t1 = jj_consume_token(rango);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case nota:{
        t1 = jj_consume_token(nota);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case fichero:{
        t1 = jj_consume_token(fichero);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case calcular:{
        t1 = jj_consume_token(calcular);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case iniciar:{
        t1 = jj_consume_token(iniciar);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case agrupacion:{
          t2 = jj_consume_token(agrupacion);
          break;
          }
        case ciclo:{
          t2 = jj_consume_token(ciclo);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
jjtn000.setName(t1.image+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case finalizar:{
        t1 = jj_consume_token(finalizar);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case agrupacion:{
          t2 = jj_consume_token(agrupacion);
          break;
          }
        case ciclo:{
          t2 = jj_consume_token(ciclo);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
jjtn000.setName(t1.image+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case condicion:{
        t1 = jj_consume_token(condicion);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case hora:{
        t1 = jj_consume_token(hora);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case fecha:{
        t1 = jj_consume_token(fecha);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case fechahora:{
        t1 = jj_consume_token(fechahora);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case selecciona_uno:{
        t1 = jj_consume_token(selecciona_uno);
        jj_consume_token(id);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      case selecciona_multiples:{
        t1 = jj_consume_token(selecciona_multiples);
        jj_consume_token(id);
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PARAMETROS() throws ParseException {/*@bgen(jjtree) PARAMETROS */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(parametroC);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case cad_min:
        case cad_max:
        case iniciar:
        case finalizar:
        case opcion:
        case cad_fila:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        PARAMETRO();
      }
      jj_consume_token(parametroC2);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PARAMETRO() throws ParseException {/*@bgen(jjtree) PARAMETRO */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case cad_min:{
        cad_min();
        break;
        }
      case cad_max:{
        cad_max();
        break;
        }
      case cad_fila:{
        cad_fila();
        break;
        }
      case iniciar:{
        iniciar();
        break;
        }
      case finalizar:{
        finalizar();
        break;
        }
      case opcion:{
        opcion2();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void cad_min() throws ParseException {/*@bgen(jjtree) cad_min */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_MIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadMin();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void cad_max() throws ParseException {/*@bgen(jjtree) cad_max */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_MAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadMax();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void cad_fila() throws ParseException {/*@bgen(jjtree) cad_fila */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_FILA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadFila();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void iniciar() throws ParseException {/*@bgen(jjtree) iniciar */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadIniciar();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void finalizar() throws ParseException {/*@bgen(jjtree) finalizar */
  SimpleNode jjtn000 = new SimpleNode(JJTFINALIZAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadFinalizar();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void opcion2() throws ParseException {/*@bgen(jjtree) opcion2 */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cadOpcion();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void cadMin() throws ParseException {/*@bgen(jjtree) cadMin */
                      SimpleNode jjtn000 = new SimpleNode(JJTCADMIN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(cad_min);
      jj_consume_token(igual);
      t1 = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void cadMax() throws ParseException {/*@bgen(jjtree) cadMax */
                      SimpleNode jjtn000 = new SimpleNode(JJTCADMAX);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(cad_max);
      jj_consume_token(igual);
      t1 = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void cadFila() throws ParseException {/*@bgen(jjtree) cadFila */
                        SimpleNode jjtn000 = new SimpleNode(JJTCADFILA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(cad_fila);
      jj_consume_token(igual);
      t1 = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void cadIniciar() throws ParseException {/*@bgen(jjtree) cadIniciar */
                              SimpleNode jjtn000 = new SimpleNode(JJTCADINICIAR);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(iniciar);
      jj_consume_token(igual);
      t1 = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void cadFinalizar() throws ParseException {/*@bgen(jjtree) cadFinalizar */
                                  SimpleNode jjtn000 = new SimpleNode(JJTCADFINALIZAR);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(finalizar);
      jj_consume_token(igual);
      t1 = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void cadOpcion() throws ParseException {/*@bgen(jjtree) cadOpcion */
                            SimpleNode jjtn000 = new SimpleNode(JJTCADOPCION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(opcion);
      jj_consume_token(igual);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case v_f:{
        t1 = jj_consume_token(v_f);
        break;
        }
      case si_no:{
        t1 = jj_consume_token(si_no);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void tENCABEZADO_PRE() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                       SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case preg:{
        t = jj_consume_token(preg);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case preg2:{
        t = jj_consume_token(preg2);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*-------------------------------- OPCIONES --------------------------------------*/
  final public 
void OPCIONES() throws ParseException {/*@bgen(jjtree) OPCIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ENCABEZADO_O();
      LISTA_OPCIONES();
      ENCABEZADO_O();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ENCABEZADO_O() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case opciones:{
        t = jj_consume_token(opciones);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case opciones2:{
        t = jj_consume_token(opciones2);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void LISTA_OPCIONES() throws ParseException {/*@bgen(jjtree) LISTA_OPCIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_OPCIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case opt:
        case opt2:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        OPCION();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OPCION() throws ParseException {/*@bgen(jjtree) OPCION */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tENCABEZADO_OPT();
      LISTA_OPT();
      tENCABEZADO_OPT();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void tENCABEZADO_OPT() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                       SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case opt:{
        t = jj_consume_token(opt);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case opt2:{
        t = jj_consume_token(opt2);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LISTA_OPT() throws ParseException {/*@bgen(jjtree) LISTA_OPT */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_OPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case etiqueta:
        case nombre_lista:
        case nombre:
        case multimedia:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        sent_unidad_opcion();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void sent_unidad_opcion() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case nombre_lista:{
      nombre_lista();
      break;
      }
    case nombre:{
      nombre();
      break;
      }
    case multimedia:{
      multimedia();
      break;
      }
    case etiqueta:{
      etiqueta();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void etiqueta() throws ParseException {/*@bgen(jjtree) etiqueta */
  SimpleNode jjtn000 = new SimpleNode(JJTETIQUETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      etiquetaO();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void etiquetaO() throws ParseException {/*@bgen(jjtree) etiqueta */
                           SimpleNode jjtn000 = new SimpleNode(JJTETIQUETA);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(etiqueta);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image.replace("<etiqueta>","").replace("</etiqueta>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void nombre_listaO() throws ParseException {/*@bgen(jjtree) nombre_lista */
                                   SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE_LISTA);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(nombre_lista);
      t = jj_consume_token(id);
      jj_consume_token(nombre_lista2);
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void nombreO() throws ParseException {/*@bgen(jjtree) nombre */
                       SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(nombre);
      t = jj_consume_token(id);
      jj_consume_token(nombre2);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void multimedia() throws ParseException {/*@bgen(jjtree) multimedia */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(multimedia);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case imagen:
      case audio:
      case video:{
        opcionMultimedia();
        REP();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(multimedia2);
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void nombre_lista() throws ParseException {/*@bgen(jjtree) nombre_lista */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE_LISTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nombre_listaO();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void nombre() throws ParseException {/*@bgen(jjtree) nombre */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      nombreO();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void opcionMultimedia() throws ParseException {/*@bgen(jjtree) opcionMultimedia */
                                           SimpleNode jjtn000 = new SimpleNode(JJTOPCIONMULTIMEDIA);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case imagen:{
        t = jj_consume_token(imagen);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case video:{
        t = jj_consume_token(video);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case audio:{
        t = jj_consume_token(audio);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void REP() throws ParseException {/*@bgen(jjtree) REP */
  SimpleNode jjtn000 = new SimpleNode(JJTREP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CADENA:{
        Cadena();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case reproduccion:{
          REP2();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
        }
      case reproduccion:{
        REP2();
        Cadena();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void REP2() throws ParseException {/*@bgen(jjtree) REP2 */
  SimpleNode jjtn000 = new SimpleNode(JJTREP2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(reproduccion);
      jj_consume_token(igual);
      activarMultimedia();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void activarMultimedia() throws ParseException {/*@bgen(jjtree) activarMultimedia */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIVARMULTIMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TIPO_BOOL();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void TIPO_BOOL() throws ParseException {/*@bgen(jjtree) tipoBool */
                            SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case verdadero:{
        t = jj_consume_token(verdadero);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case falso:{
        t = jj_consume_token(falso);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case NUM:{
        t = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Cadena() throws ParseException {/*@bgen(jjtree) Cadena */
  SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Cad();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Cad() throws ParseException {/*@bgen(jjtree) tipoCadena */
                       SimpleNode jjtn000 = new SimpleNode(JJTTIPOCADENA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

/*------------------------------------ CONFIGURACIONES -----------------------------------*/
  final public 

void ENCABEZADO_C() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case configuraciones:{
        t = jj_consume_token(configuraciones);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case configuraciones2:{
        t = jj_consume_token(configuraciones2);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CONFIGURACION() throws ParseException {/*@bgen(jjtree) CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTCONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ENCABEZADO_C();
      LISTA_CONFIGURACIONES();
      ENCABEZADO_C();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LISTA_CONFIGURACIONES() throws ParseException {/*@bgen(jjtree) LISTA_CONFIGURACIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_CONFIGURACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case confi:
        case confi2:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_7;
        }
        ELEMENTO_CONFIGURACION();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ELEMENTO_CONFIGURACION() throws ParseException {/*@bgen(jjtree) ELEMENTO_CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTO_CONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tENCABEZADO_CONFI();
      L_OP_CONFIGURACION();
      tENCABEZADO_CONFI();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void tENCABEZADO_CONFI() throws ParseException {/*@bgen(jjtree) Encabezado_Val */
                                         SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case confi:{
        t = jj_consume_token(confi);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case confi2:{
        t = jj_consume_token(confi2);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void L_OP_CONFIGURACION() throws ParseException {/*@bgen(jjtree) L_OP_CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTL_OP_CONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case importar:
        case codigo_principal:
        case codigo_global:
        case titulo_formulario:
        case idform:
        case estilo:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_8;
        }
        OP_CONFIGURACION();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OP_CONFIGURACION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case idform:{
      idForm();
      break;
      }
    case estilo:{
      Estilo();
      break;
      }
    case titulo_formulario:{
      titulo_formulario();
      break;
      }
    case importar:{
      importar();
      break;
      }
    case codigo_global:{
      codigo_global();
      break;
      }
    case codigo_principal:{
      codigo_principal();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void idForm() throws ParseException {/*@bgen(jjtree) idForm */
  SimpleNode jjtn000 = new SimpleNode(JJTIDFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idFormConf();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Estilo() throws ParseException {/*@bgen(jjtree) Estilo */
  SimpleNode jjtn000 = new SimpleNode(JJTESTILO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(estilo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case pagina:
      case todo:
      case cuadricula:{
        tipoEstilo();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(estilo2);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void titulo_formulario() throws ParseException {/*@bgen(jjtree) titulo_formulario */
  SimpleNode jjtn000 = new SimpleNode(JJTTITULO_FORMULARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tituloForm();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void importar() throws ParseException {/*@bgen(jjtree) importar */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      importarConf();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void codigo_principal() throws ParseException {/*@bgen(jjtree) codigo_principal */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_PRINCIPAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      codPrincipal();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void codPrincipal() throws ParseException {/*@bgen(jjtree) codPrincipal */
                                  SimpleNode jjtn000 = new SimpleNode(JJTCODPRINCIPAL);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(codigo_principal);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t.image.replace("<codigo_principal>","").replace("</codigo_principal>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void codigo_global() throws ParseException {/*@bgen(jjtree) codigo_global */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_GLOBAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      codGlobal();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void codGlobal() throws ParseException {/*@bgen(jjtree) codGlobal */
                            SimpleNode jjtn000 = new SimpleNode(JJTCODGLOBAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(codigo_global);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.setName(t.image.replace("<codigo_global>","").replace("</codigo_global>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void importarConf() throws ParseException {/*@bgen(jjtree) importarConf */
                                  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTARCONF);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(importar);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image.replace("<importar>","").replace("</importar>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void tituloForm() throws ParseException {/*@bgen(jjtree) tituloForm */
                              SimpleNode jjtn000 = new SimpleNode(JJTTITULOFORM);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(titulo_formulario);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.setName(t.image.replace("<titulo_formulario>","").replace("</titulo_formulario>",""));jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void idFormConf() throws ParseException {/*@bgen(jjtree) idForm */
                          SimpleNode jjtn000 = new SimpleNode(JJTIDFORM);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(idform);
      t = jj_consume_token(id);
      jj_consume_token(idform2);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void tipoEstilo() throws ParseException {/*@bgen(jjtree) tipoEstilo */
                              SimpleNode jjtn000 = new SimpleNode(JJTTIPOESTILO);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case pagina:{
        t = jj_consume_token(pagina);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case todo:{
        t = jj_consume_token(todo);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      case cuadricula:{
        t = jj_consume_token(cuadricula);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*--------------------------------- cUERPO TAGS ----------------------*/
  final public 
void LISTA_UNIDADES() throws ParseException {/*@bgen(jjtree) LISTA_UNIDADES */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_UNIDADES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_9;
        }
        obtenerValorUnidad();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void unidad() throws ParseException {/*@bgen(jjtree) unidad */
  SimpleNode jjtn000 = new SimpleNode(JJTUNIDAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      obtenerValorUnidad();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void obtenerValorUnidad() throws ParseException {/*@bgen(jjtree) obtenerValorUnidad */
                                               SimpleNode jjtn000 = new SimpleNode(JJTOBTENERVALORUNIDAD);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        t = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case hexa:{
        t = jj_consume_token(hexa);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case CADENA:{
        t = jj_consume_token(CADENA);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case CARACTER:{
        t = jj_consume_token(CARACTER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case dosPuntos:{
        t = jj_consume_token(dosPuntos);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case abrePar:{
        t = jj_consume_token(abrePar);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case cierraPar:{
        t = jj_consume_token(cierraPar);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case coma:{
        t = jj_consume_token(coma);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case doblePunto:{
        t = jj_consume_token(doblePunto);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case punto:{
        t = jj_consume_token(punto);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case puntoComa:{
        t = jj_consume_token(puntoComa);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case abreLlave:{
        t = jj_consume_token(abreLlave);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case cierraLlave:{
        t = jj_consume_token(cierraLlave);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case abreCorchete:{
        t = jj_consume_token(abreCorchete);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case cierraCorchete:{
        t = jj_consume_token(cierraCorchete);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case arroba:{
        t = jj_consume_token(arroba);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case menorIgual:{
        t = jj_consume_token(menorIgual);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case mayorIgual:{
        t = jj_consume_token(mayorIgual);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case menor:{
        t = jj_consume_token(menor);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case mayor:{
        t = jj_consume_token(mayor);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case igualIgual:{
        t = jj_consume_token(igualIgual);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case distintoA:{
        t = jj_consume_token(distintoA);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case or:{
        t = jj_consume_token(or);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case and:{
        t = jj_consume_token(and);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case menosMenos:{
        t = jj_consume_token(menosMenos);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case masMas:{
        t = jj_consume_token(masMas);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case suma:{
        t = jj_consume_token(suma);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case resta:{
        t = jj_consume_token(resta);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case multiplicacion:{
        t = jj_consume_token(multiplicacion);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case division:{
        t = jj_consume_token(division);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case modulo:{
        t = jj_consume_token(modulo);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case div:{
        t = jj_consume_token(div);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case potencia:{
        t = jj_consume_token(potencia);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case igual:{
        t = jj_consume_token(igual);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case not:{
        t = jj_consume_token(not);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case id:{
        t = jj_consume_token(id);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case exclamacion:{
        t = jj_consume_token(exclamacion);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case pregunta2:{
        t = jj_consume_token(pregunta2);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case pregunta1:{
        t = jj_consume_token(pregunta1);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(not)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(igual)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(potencia)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(div)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(modulo)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(division)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(multiplicacion)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(resta)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(suma)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(masMas)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(and)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(menosMenos)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(or)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(distintoA)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(igualIgual)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(mayor)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(menor)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(mayorIgual)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(menorIgual)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(arroba)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(cierraCorchete)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(abreCorchete)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(cierraLlave)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(abreLlave)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(puntoComa)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(punto)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(doblePunto)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(coma)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(cierraPar)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(abrePar)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(dosPuntos)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(CARACTER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(hexa)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(pregunta1)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(pregunta2)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(exclamacion)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public grammarXLSXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x3f800000,0x3f800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x1e000,0x1e000,0x300000,0x300000,0x6000000,0x6000000,0x0,0x0,0x6000000,0x4f800000,0x4f800000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000,0xe0000,0x400000,0x400000,0x300000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x240000,0x2000000,0x2000000,0x0,0x0,0x7ffc,0x7ffc,0x18000,0x18000,0x7ffc,0x0,0x0,0x0,0x240000,0x0,0x120000,0x120000,0x3800000,0x3800000,0x0,0x0,0x0,0x0,0x0,0x0,0x480000,0x480000,0xc0000000,0xc0000000,0x3,0x3,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0xfc,0xfc,0x24,0x0,0x1006700,0x1006700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x57,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public grammarXLSX(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grammarXLSX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grammarXLSXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public grammarXLSX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grammarXLSXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public grammarXLSX(grammarXLSXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(grammarXLSXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[201];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 201; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
