/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammarXLSX.jj */
/*@egen*/options{
	
IGNORE_CASE = true;
	STATIC=false;
	                        
}

PARSER_BEGIN(grammarXLSX)

package XLSX.AnalizerXML;
import java.util.ArrayList;
import java.util.List;
import static proyecto1_201122872.Proyecto1_201122872.erroresEjecucion;
public class grammarXLSX/*@bgen(jjtree)*/implements grammarXLSXTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTgrammarXLSXState jjtree = new JJTgrammarXLSXState();

/*@egen*/

}

PARSER_END(grammarXLSX)

SKIP:
{
 " "
    |"\r"
    |"\t"
    |"\r\n"
    | "$#" : COMMENT
    |"\n"
    | "$$" : COMMENT2	
}

<COMMENT> SKIP :{
  "#$" : DEFAULT
}

<COMMENT> MORE :{
   <~[]>
}

<COMMENT2> SKIP :{
  "\n" : DEFAULT
}

<COMMENT2> MORE :{
   <~[]>
}


MORE :
{
  "<etiqueta>"{}: estado2
  |"<sugerir>"{}: estado2
  |"<codigo_pre>"{}: estado2
  |"<codigo_post>"{}: estado2
  |"<restringirMsn>"{}: estado2
  |"<requeridoMsn>"{}: estado2
  |"<predeterminado>"{}: estado2
  |"<importar>"{}:estado2
  |"<codigo_principal>"{}:estado2
  |"<codigo_global>"{}:estado2
  |"<titulo_formulario>"{}:estado2
  |"<nombre_lista>"{}:estado2
}

<estado2> TOKEN :
{
  <etiqueta: "</etiqueta>"> {} : DEFAULT
 |<sugerir: "</sugerir>"> {} : DEFAULT
 |<codigo_pre: "</codigo_pre>"> {} : DEFAULT
 |<codigo_post: "</codigo_post>"> {} : DEFAULT
 |<restringirMsn: "</restringirMsn>"> {} : DEFAULT
 |<requeridoMsn: "</requeridoMsn>"> {} : DEFAULT
 |<predeterminado: "</predeterminado>"> {} : DEFAULT
 |<importar: "</importar>"> {} : DEFAULT
 |<codigo_principal: "</codigo_principal>"> {} : DEFAULT
 |<codigo_global: "</codigo_global>"> {} : DEFAULT
 |<titulo_formulario: "</titulo_formulario>"> {} : DEFAULT
 |<nombre_lista: "</nombre_lista>"> {} : DEFAULT
}

<estado2> MORE :
{
  <~[]> {
	  
  }
}

MORE:
{
 "<restringir>": operaciones
 | "<aplicable>": operaciones
 | "<calculo>": operaciones
 | "<repeticion>": operaciones
 |"<requerido>":operaciones
 |"<lectura>":operaciones
}


<operaciones> MORE :
{
		<menorIgual_: "<=">
		|<mayorIgual_: ">=">
		|<menor_: "<">
		|<mayor_:">">
		|<igualIgual_:"==">
		|<distintoA_:"!=">
		|<menosMenos_:"--">  
		|<masMas_:"++">  
		|<suma_: "+">
		|<resta_: "-">
		|<multiplicacion_: "*">
		|<modulo_: "mod">{int toktam = lengthOfMatch; image.replace(image.length()-toktam,image.length(),"%");}
		|<div_: "div"> {int toktam2 = lengthOfMatch; image.replace(image.length()-toktam2,image.length(),"/");}
		|<potencia_: "^">
		|< or_: "||">
		| < and_: "&&">
		| < not_: "!">
		|<igual_: "=">
		|<doblePunto_: "..">
		|<punto_:".">{int toktam3 = lengthOfMatch; image.replace(image.length()-toktam3,image.length(),"param_1");}
		|<arroba_ :"@">
		|<abrePar_: "(">
		|<cierraPar_: ")">
		|<NUM_: ("-")?(["0"-"9"])+ ("."(["0"-"9"])+)?>
		|  < CARACTER_: "\'" (["0"-"9"] | ["_","a"-"z","A"-"Z"] | "#" | "$" | "%" | "?" | "\u00c2\u00bf" | "@")  "\'">
		|	<tagid_: ["#"]["["]["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*["]"] >
		|	<id_: ["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*>
		|   < CADENA_: "\"" (  ~["\""] )* "\"">
		|  < #NUMERAL_: ["#"] >
		|  < hexa_: <NUMERAL_> (<LETRA_>|<DIGITO_>)* >
		  |  < #LETRA_: ["_","a"-"z","A"-"Z"] >
		  |  < #DIGITO_: ["0"-"9"] >
		|	" "
		|	"\r"
		|	"\n"
		|	"\t"
		|	"\r\n"	
}



<operaciones> TOKEN:
{
	 <restringir: "</restringir>"> {matchedToken.image=image.toString();} : DEFAULT
	 | <aplicable: "</aplicable>"> {matchedToken.image=image.toString();}  : DEFAULT
	 | <calculo: "</calculo>"> {matchedToken.image=image.toString();}  : DEFAULT
	 | <repeticion: "</repeticion>"> {matchedToken.image=image.toString();}  : DEFAULT
	 | <requerido: "</requerido>"> {matchedToken.image=image.toString();}  : DEFAULT
	 | <lectura: "</lectura>"> {matchedToken.image=image.toString();}  : DEFAULT
	 
}	

TOKEN:{

	<imagen: "media_imagen">
	|<audio: "media_audio">
	|<video:"media_video">
	|<verdadero: "verdadero">
	|<falso:"falso">
	|<reproduccion: "reproduccion">
	|<cad_min: "cad_min">
	|<cad_max: "cad_max">
	|<iniciar: "iniciar">
	|<finalizar: "finalizar">
	|<opcion: "opcion">
	|<v_f: "v_f">
	|<si_no: "si_no">
	| <cad_fila:"cad_fila">
}

TOKEN:{
	<pagina : "pagina">
	|<todo: "todo">
	|<cuadricula: "cuadricula">
	 |<texto:"texto">
   |<entero:"entero">
   |<decimal:"decimal">
   |<rango:"rango">
   |<condicion:"condicion">
   |<hora:"hora">
   |<fecha:"fecha">
   |<fechahora:"fechahora">
   |<selecciona_uno:"selecciona_uno">
   |<selecciona_multiples:"selecciona_multiples">
   |<nota:"nota">
   |<fichero:"fichero">
   |<calcular:"calcular">
   |<ciclo:"ciclo">
   |<agrupacion:"agrupacion">
}

TOKEN:{
  <opt:"<opt>">
  |<preg:"<preg>">
  |<confi:"<confi>">
  |<opt2:"</opt>">
  |<preg2:"</preg>">
  |<confi2:"</confi>">
}

TOKEN:{
  //<nombre_lista :"<nombre_lista>">
  <nombre: "<nombre>">
  |<multimedia: "<multimedia>">
 // |<nombre_lista2 :"</nombre_lista>">
  |<nombre2: "</nombre>">
  |<etiqueta2: "</etiqueta>">
  |<multimedia2: "</multimedia>">
}


TOKEN:{
  <idform: "<idForm>">
  |<estilo: "<estilo>">
  |<idform2: "</idForm>">
  |<estilo2: "</estilo>">
}

TOKEN:{
  <encuesta: "<encuesta>">
  |<opciones: "<opciones>">
  |<configuraciones: "<configuracion>">
  |<encuesta2: "</encuesta>">
  |<opciones2: "</opciones>">
  |<configuraciones2: "</configuracion>">
}

//----------- Encabezados ------------------	
TOKEN: 
{
   <tipoC :"<tipo>">
   |<idPreguntaC :"<idPregunta>">
	/*|< requeridoC:"<requerido>">
   |< requeridoC2:"</requerido>">*/
   |< requeridoMsnC2:"</requeridoMsn>">
   |< aparienciaC:"<apariencia>">
   |< parametroC:"<parametro>">
   |<tipoC2 :"</tipo>">
   |<idPreguntaC2 :"</idPregunta>">
   |< sugerirC2:"</sugerir>">
   |< codigo_preC2:"</codigo_pre>">
   |< codigo_postC2:"</codigo_post>">
   |< restringirC2:"</restringir>">
   |< restringirMsnC2:"</restringirMsn>">
   |< predeterminadoC2:"</predeterminado>">
   |< aplicableC2:"</aplicable>">
   /*|<lecturaC:"<lectura>">
   |< lecturaC2:"</lectura>">*/
   |< calculoC2:"</calculo>">
   |< repeticionC2:"</repeticion>">
   |< aparienciaC2:"</apariencia>">
   |< parametroC2:"</parametro>">
}


//Operadores Relacionales

TOKEN:{

<menorIgual: "<=">
		|<mayorIgual: ">=">
		|<menor: "<">
		|<mayor:">">
		|<igualIgual:"==">
		|<distintoA:"!=">
		|<menosMenos:"--">  
		|<masMas:"++">  
		|<suma: "+">
		|<resta: "-">
		|<multiplicacion: "*">
		|<division: "/">
		|<modulo: "mod">
		|<div: "div">
		|<potencia: "^">
		|< or: "||">
		| < and: "&&">
		| < not: "!">
		|<igual: "=">
		|<doblePunto: "..">
		|<punto:".">
		|<arroba :"@">
		|<abrePar: "(">
		|<cierraPar: ")">

	| <dosPuntos: ":">
	|<coma:",">
	|<puntoComa:";">
	|<abreLlave:"{">
	|<cierraLlave:"}">
	|<abreCorchete:"[">
	|<cierraCorchete:"]">
	| < pregunta1: "?">
	| < pregunta2: "\u00c2\u00bf">
	|<exclamacion:"\u00c2\u00a1">
	|<id: ["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*>
	|<NUM: ("-")?(["0"-"9"])+ ("."(["0"-"9"])+)?>
		|  < CARACTER: "\'" (["0"-"9"] | ["_","a"-"z","A"-"Z"] | "#" | "$" | "%" | "?" | "\u00c2\u00bf" | "@")  "\'">
		|	<tagid: ["#"]["["]["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*["]"] >
		|   < CADENA: "\"" (  ~["\""] )* "\"">
		|  < #NUMERAL: ["#"] >
		|  < hexa: <NUMERAL> (<LETRA>|<DIGITO>)* >
		  |  < #LETRA: ["_","a"-"z","A"-"Z"] >
		  |  < #DIGITO: ["0"-"9"] >
}





SimpleNode Start():{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
        try {
/*@egen*/

	Inicio()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Inicio():{/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Inicio */
  try {
/*@egen*/
  (Archivo())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Archivo()        :{/*@bgen(jjtree) Archivo */
  SimpleNode jjtn000 = new SimpleNode(JJTARCHIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Archivo */
        try {
/*@egen*/
	
	try{
 ENCUESTA()
  {
   System.out.println("Se encontro la sentencia lee");
 
  }
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("No se ha podido completar la produccion de Encuestas");

 }
 
   |try{
 OPCIONES()
  {
   System.out.println("Se encontro la sentencia lee");
 
  }
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("No se ha podido completar la produccion de Opciones");
 }
   
  | try{
 CONFIGURACION()
  {
   System.out.println("Se encontro la sentencia lee");
 
  }
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("No se ha podido completar la produccion de Configuraciones");
 }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
  
}

/*------------------------------------------ ENCUESTA -----------------------------*/

void ENCUESTA():{/*@bgen(jjtree) ENCUESTA */
  SimpleNode jjtn000 = new SimpleNode(JJTENCUESTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ENCUESTA */
try {
/*@egen*/
ENCABEZADO_E() LISTA_PREGUNTAS() ENCABEZADO_E()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ENCABEZADO_ENCUESTA():{/*@bgen(jjtree) ENCABEZADO_ENCUESTA */
  SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_ENCUESTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ENCABEZADO_ENCUESTA */
  try {
/*@egen*/
  ENCABEZADO_E()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ENCABEZADO_E()               :{/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
        try {
/*@egen*/
	try{
    t= <encuesta>{ jjtn000.setName(t.image); jjtn000.setPos(t.beginLine, t.beginColumn); }
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error en etiqueta que abre encuesta");
 }
 | try{
    t=<encuesta2>{ jjtn000.setName(t.image);  jjtn000.setPos(t.beginLine, t.beginColumn);}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error en etiqueta que cierra encuesta");
 }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
	
	/*
    t= <encuesta>{ jjtThis.setName(t.image); jjtThis.setPos(t.beginLine, t.beginColumn); }
   |t=<encuesta2>{ jjtThis.setName(t.image);  jjtThis.setPos(t.beginLine, t.beginColumn);}*/

}

void LISTA_PREGUNTAS():{/*@bgen(jjtree) LISTA_PREGUNTAS */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_PREGUNTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LISTA_PREGUNTAS */
        try {
/*@egen*/
	(try{
    PREGUNTA()
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error en produccion pregunta");
 })*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
 //(PREGUNTA())*
}

void PREGUNTA():{/*@bgen(jjtree) PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTPREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PREGUNTA */
    try {
/*@egen*/
    tENCABEZADO_PRE() L_OPT_PREGUNTA()  tENCABEZADO_PRE()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}


void L_OPT_PREGUNTA():{/*@bgen(jjtree) L_OPT_PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTL_OPT_PREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) L_OPT_PREGUNTA */
  try {
/*@egen*/
  (OPT_PREGUNTA())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OPT_PREGUNTA():{/*@bgen(jjtree) OPT_PREGUNTA */
  SimpleNode jjtn000 = new SimpleNode(JJTOPT_PREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OPT_PREGUNTA */
 try {
/*@egen*/
 // ENCABEZADO_VAL() LISTA_UNIDADES() ENCABEZADO_VAL()
 
 try{
 tipo(){ }
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Tipo");
 }
 |try{
idPregunta(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Id Pregunta");
 }
 
 |try{
 etiqueta(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Etiqueta");
 }
 |try{
 Sugerir(){}
 }catch (ParseException e){
  erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Sugerir");
 }
 |try{
codigo_pre(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Codigo Pre");
 }
 |try{
 codigo_post(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Codigo Post");
 }
 |try{
 restringirMsn(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de RestringirMsn");
 }
 |try{
 requeridoMsn(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de requeridoMsn");
 }
 |try{
 predeterminado(){}
 }catch (ParseException e){
  erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Predeterminado");
 }
 |try{
 restringir(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Restringir");
 }
 |try{
 aplicable(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Aplicable");
 }
 |try{
 calculo(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Calculo");
 }
 |try{
 repeticion(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Repeticion");
 }
 |try{
 requerido(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Requerido");
 }
 |try{
 lectura(){}
 }catch (ParseException e){
  erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Lectura");
 }
 
 |try{
 multimedia(){}
 }catch (ParseException e){
  erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de Multimedia");
 }
 
 |try{
 apariencia(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("No se ha podido completar la produccion de Apariencia");
 }
 
 |try{
 PARAMETROS(){}
 }catch (ParseException e){
   erroresEjecucion.errorSintactico("Error, no se pudo completar la columna de parametros");
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
 
 /*tipo()
 |idPregunta()
 |etiqueta()
 |Sugerir()
 |codigo_pre()
 |codigo_post()
 |restringirMsn()
 |requeridoMsn()
 |predeterminado()
 |restringir()
 |aplicable()
 |calculo()
 |repeticion()
 |requerido()
 |lectura()
 |multimedia()
 |apariencia()
 |PARAMETROS()*/
}


void tipo():{/*@bgen(jjtree) tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipo */
 try {
/*@egen*/
 <tipoC> (TIPO_E())? <tipoC2>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void idPregunta():{/*@bgen(jjtree) idPregunta */
  SimpleNode jjtn000 = new SimpleNode(JJTIDPREGUNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) idPregunta */
try {
/*@egen*/
<idPreguntaC>(identificador())?<idPreguntaC2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void idPreguntaE()            :{/*@bgen(jjtree) idPreguntaE */
                                SimpleNode jjtn000 = new SimpleNode(JJTIDPREGUNTAE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) idPreguntaE */
try {
/*@egen*/
<idPreguntaC>(ID())?<idPreguntaC2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void Sugerir():{/*@bgen(jjtree) Sugerir */
  SimpleNode jjtn000 = new SimpleNode(JJTSUGERIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Sugerir */
try {
/*@egen*/
sugerirO()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void sugerirO()        :{/*@bgen(jjtree) sugerir */
                         SimpleNode jjtn000 = new SimpleNode(JJTSUGERIR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) sugerir */
        try {
/*@egen*/
	t=<sugerir>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{ jjtn000.setName(t.image.replace("<sugerir>","").replace("</sugerir>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void codigo_pre():{/*@bgen(jjtree) codigo_pre */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_PRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) codigo_pre */
try {
/*@egen*/
codPre()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void codPre()       :{/*@bgen(jjtree) codPre */
                      SimpleNode jjtn000 = new SimpleNode(JJTCODPRE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) codPre */
        try {
/*@egen*/
	t=<codigo_pre>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000.setName(t.image.replace("<codigo_pre>","").replace("</codigo_pre>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void codigo_post():{/*@bgen(jjtree) codigo_post */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_POST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) codigo_post */
try {
/*@egen*/
codPost()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void codPost()        :{/*@bgen(jjtree) codPost */
                        SimpleNode jjtn000 = new SimpleNode(JJTCODPOST);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) codPost */
        try {
/*@egen*/
	t=<codigo_post>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{ jjtn000.setName(t.image.replace("<codigo_post>","").replace("</codigo_post>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void restringirMsn():{/*@bgen(jjtree) restringirMsn */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTRINGIRMSN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) restringirMsn */
try {
/*@egen*/
restrMsn()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void restrMsn()         :{/*@bgen(jjtree) restrMsn */
                          SimpleNode jjtn000 = new SimpleNode(JJTRESTRMSN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) restrMsn */
        try {
/*@egen*/
	t=<restringirMsn>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{ jjtn000.setName(t.image.replace("<restringirmsn>","").replace("</restringirmsn>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void requeridoMsn():{/*@bgen(jjtree) requeridoMsn */
  SimpleNode jjtn000 = new SimpleNode(JJTREQUERIDOMSN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) requeridoMsn */
try {
/*@egen*/
requeMsn()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void requeMsn()         :{/*@bgen(jjtree) requeMsn */
                          SimpleNode jjtn000 = new SimpleNode(JJTREQUEMSN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) requeMsn */
        try {
/*@egen*/
	t=<requeridoMsn>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{ jjtn000.setName(t.image.replace("<requeridomsn>","").replace("</requeridomsn>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




void predeterminado():{/*@bgen(jjtree) predeterminado */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDETERMINADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) predeterminado */
try {
/*@egen*/
predeter()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void predeter()         :{/*@bgen(jjtree) predeter */
                          SimpleNode jjtn000 = new SimpleNode(JJTPREDETER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) predeter */
        try {
/*@egen*/
	t1=<predeterminado>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{ jjtn000.setName(t1.image.replace("<predeterminado>","").replace("</predeterminado>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void restringir():{/*@bgen(jjtree) restringir */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTRINGIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) restringir */
try {
/*@egen*/
restrin()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void restrin()        :{/*@bgen(jjtree) restrin */
                        SimpleNode jjtn000 = new SimpleNode(JJTRESTRIN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) restrin */
        try {
/*@egen*/
	t1=<restringir>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{ jjtn000.setName(t1.image.replace("<restringir>","").replace("</restringir>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void aplicable():{/*@bgen(jjtree) aplicable */
  SimpleNode jjtn000 = new SimpleNode(JJTAPLICABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) aplicable */
try {
/*@egen*/
apli()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void apli()     :{/*@bgen(jjtree) apli */
                  SimpleNode jjtn000 = new SimpleNode(JJTAPLI);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) apli */
        try {
/*@egen*/
	t1=<aplicable>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000.setName(t1.image.replace("<aplicable>","").replace("</aplicable>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void calculo():{/*@bgen(jjtree) calculo */
  SimpleNode jjtn000 = new SimpleNode(JJTCALCULO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) calculo */
try {
/*@egen*/
calcu()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void calcu()      :{/*@bgen(jjtree) calcu */
                    SimpleNode jjtn000 = new SimpleNode(JJTCALCU);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) calcu */
        try {
/*@egen*/
	t1=<calculo>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{ jjtn000.setName(t1.image.replace("<calculo>","").replace("</calculo>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void repeticion():{/*@bgen(jjtree) repeticion */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) repeticion */
try {
/*@egen*/
repet()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void repet()      :{/*@bgen(jjtree) repet */
                    SimpleNode jjtn000 = new SimpleNode(JJTREPET);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) repet */
        try {
/*@egen*/
	t1=<repeticion>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{ jjtn000.setName(t1.image.replace("<repeticion>","").replace("</repeticion>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void requerido():{/*@bgen(jjtree) requerido */
  SimpleNode jjtn000 = new SimpleNode(JJTREQUERIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) requerido */
 try {
/*@egen*/
 reque()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void reque()      :{/*@bgen(jjtree) reque */
                    SimpleNode jjtn000 = new SimpleNode(JJTREQUE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) reque */
        try {
/*@egen*/
	t1=<requerido>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000.setName(t1.image.replace("<requerido>","").replace("</requerido>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void lectura():{/*@bgen(jjtree) lectura */
  SimpleNode jjtn000 = new SimpleNode(JJTLECTURA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) lectura */
 try {
/*@egen*/
 lecto()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void lecto()      :{/*@bgen(jjtree) lecto */
                    SimpleNode jjtn000 = new SimpleNode(JJTLECTO);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) lecto */
        try {
/*@egen*/
	t1=<lectura>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{ jjtn000.setName(t1.image.replace("<lectura>","").replace("</lectura>",""));jjtn000.setPos(t1.beginLine, t1.beginColumn);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void apariencia():{/*@bgen(jjtree) apariencia */
  SimpleNode jjtn000 = new SimpleNode(JJTAPARIENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) apariencia */
try {
/*@egen*/
<aparienciaC> ((identificador()|TIPO_E()))? <aparienciaC2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ID():{/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ID */
 try {
/*@egen*/
 identificador()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void identificador()              :{/*@bgen(jjtree) identificador */
                                    SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) identificador */
    try {
/*@egen*/
    t1 = <id>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TIPO_E()     :{/*@bgen(jjtree) tipo */
                    SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}{/*@bgen(jjtree) tipo */
try {
/*@egen*/
{t2=new Token();}
    t1=<texto>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName("cadena");jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<entero>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<decimal>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<rango>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<nota>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<fichero>{t2 = new Token();
t2.image="";}(t2=<CADENA>)?/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.setName(t1.image+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<calcular>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<iniciar> (t2=<agrupacion> | t2=<ciclo> )/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/{ jjtn000.setName(t1.image+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<finalizar>(t2=<agrupacion> | t2=<ciclo> )/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/{ jjtn000.setName(t1.image+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<condicion>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<hora>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<fecha>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<fechahora>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<selecciona_uno> t2=<id>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{ jjtn000.setName(t1.image+"%"+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }
   |t1=<selecciona_multiples> t2=<id>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{ jjtn000.setName(t1.image+"%"+t2.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
	
}


void PARAMETROS():{/*@bgen(jjtree) PARAMETROS */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PARAMETROS */
        try {
/*@egen*/
	<parametroC>(PARAMETRO())* <parametroC2>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void PARAMETRO():{/*@bgen(jjtree) PARAMETRO */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PARAMETRO */
try {
/*@egen*/
cad_min()
|cad_max()
|cad_fila()
|iniciar()
|finalizar()
|opcion2()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void cad_min():{/*@bgen(jjtree) cad_min */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_MIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) cad_min */
 try {
/*@egen*/
 cadMin()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void cad_max():{/*@bgen(jjtree) cad_max */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_MAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) cad_max */
try {
/*@egen*/
cadMax()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void cad_fila():{/*@bgen(jjtree) cad_fila */
  SimpleNode jjtn000 = new SimpleNode(JJTCAD_FILA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) cad_fila */
try {
/*@egen*/
cadFila()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void iniciar():{/*@bgen(jjtree) iniciar */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) iniciar */
try {
/*@egen*/
cadIniciar()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void finalizar():{/*@bgen(jjtree) finalizar */
  SimpleNode jjtn000 = new SimpleNode(JJTFINALIZAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) finalizar */
try {
/*@egen*/
cadFinalizar()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void opcion2():{/*@bgen(jjtree) opcion2 */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opcion2 */
try {
/*@egen*/
cadOpcion()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void cadMin()       :{/*@bgen(jjtree) cadMin */
                      SimpleNode jjtn000 = new SimpleNode(JJTCADMIN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadMin */
   try {
/*@egen*/
   <cad_min><igual> t1=<NUM>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void cadMax()       :{/*@bgen(jjtree) cadMax */
                      SimpleNode jjtn000 = new SimpleNode(JJTCADMAX);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadMax */
   try {
/*@egen*/
   <cad_max><igual> t1=<NUM>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void cadFila()        :{/*@bgen(jjtree) cadFila */
                        SimpleNode jjtn000 = new SimpleNode(JJTCADFILA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadFila */
   try {
/*@egen*/
   <cad_fila><igual> t1=<NUM>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void cadIniciar()           :{/*@bgen(jjtree) cadIniciar */
                              SimpleNode jjtn000 = new SimpleNode(JJTCADINICIAR);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadIniciar */
   try {
/*@egen*/
   <iniciar><igual> t1=<NUM>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void cadFinalizar()             :{/*@bgen(jjtree) cadFinalizar */
                                  SimpleNode jjtn000 = new SimpleNode(JJTCADFINALIZAR);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadFinalizar */
   try {
/*@egen*/
   <finalizar><igual> t1=<NUM>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void cadOpcion()          :{/*@bgen(jjtree) cadOpcion */
                            SimpleNode jjtn000 = new SimpleNode(JJTCADOPCION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}{/*@bgen(jjtree) cadOpcion */
   try {
/*@egen*/
   <opcion><igual> (t1=<v_f>|t1=<si_no>)/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/{ jjtn000.setName(t1.image);jjtn000.setPos(t1.beginLine, t1.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}



void tENCABEZADO_PRE()               :{/*@bgen(jjtree) Encabezado_Val */
                                       SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
    try {
/*@egen*/
    t= <preg>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{ jjtn000.setName(t.image); }
   |t=<preg2>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/*-------------------------------- OPCIONES --------------------------------------*/

void OPCIONES ():{/*@bgen(jjtree) OPCIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OPCIONES */
  try {
/*@egen*/
  ENCABEZADO_O() LISTA_OPCIONES() ENCABEZADO_O()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ENCABEZADO_O()               :{/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
   try {
/*@egen*/
   t=<opciones>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{ jjtn000.setName(t.image); }
   | t=<opciones2>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void LISTA_OPCIONES():{/*@bgen(jjtree) LISTA_OPCIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_OPCIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LISTA_OPCIONES */
  try {
/*@egen*/
  (OPCION())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OPCION():{/*@bgen(jjtree) OPCION */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OPCION */
try {
/*@egen*/
tENCABEZADO_OPT() LISTA_OPT() tENCABEZADO_OPT()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void tENCABEZADO_OPT()               :{/*@bgen(jjtree) Encabezado_Val */
                                       SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
    try {
/*@egen*/
    t= <opt>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{ jjtn000.setName(t.image); }
   |t=<opt2>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LISTA_OPT():{/*@bgen(jjtree) LISTA_OPT */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_OPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LISTA_OPT */
 try {
/*@egen*/ 
 (sent_unidad_opcion())*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void sent_unidad_opcion()      :{Token t;}{
	     nombre_lista()
		|nombre()
		|multimedia()
		|etiqueta()
}


void etiqueta():{/*@bgen(jjtree) etiqueta */
  SimpleNode jjtn000 = new SimpleNode(JJTETIQUETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) etiqueta */
try {
/*@egen*/
etiquetaO()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void etiquetaO()         :{/*@bgen(jjtree) etiqueta */
                           SimpleNode jjtn000 = new SimpleNode(JJTETIQUETA);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) etiqueta */
        try {
/*@egen*/
	t=<etiqueta>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{ jjtn000.setName(t.image.replace("<etiqueta>","").replace("</etiqueta>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nombre_listaO()             :{/*@bgen(jjtree) nombre_lista */
                                   SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE_LISTA);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) nombre_lista */
  try {
/*@egen*/
  /* <nombre_lista> t=<id> <nombre_lista2>{ jjtThis.setName(t.image);jjtThis.setPos(t.beginLine, t.beginColumn); }*/
  t=<nombre_lista>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{ jjtn000.setName(t.image.replace("<nombre_lista>","").replace("</nombre_lista>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void nombreO()       :{/*@bgen(jjtree) nombre */
                       SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) nombre */
try {
/*@egen*/
//<nombre>t=<id><nombre2>{ jjtThis.setName(t.image);jjtThis.setPos(t.beginLine, t.beginColumn); }
<nombre>(identificador())?<nombre2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void multimedia():{/*@bgen(jjtree) multimedia */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) multimedia */
try {
/*@egen*/
<multimedia> (opcionMultimedia() REP())? <multimedia2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void nombre_lista():{/*@bgen(jjtree) nombre_lista */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE_LISTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) nombre_lista */
try {
/*@egen*/
nombre_listaO()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void nombre():{/*@bgen(jjtree) nombre */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) nombre */
try {
/*@egen*/
nombreO()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void opcionMultimedia()                 : {/*@bgen(jjtree) opcionMultimedia */
                                           SimpleNode jjtn000 = new SimpleNode(JJTOPCIONMULTIMEDIA);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) opcionMultimedia */
    try {
/*@egen*/
    t =<imagen>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn);}
	|t =<video>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }
	|t=<audio>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void REP():{/*@bgen(jjtree) REP */
  SimpleNode jjtn000 = new SimpleNode(JJTREP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) REP */
         try {
/*@egen*/
	 Cadena() (REP2())?
	 |(REP2()) Cadena()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void REP2():{/*@bgen(jjtree) REP2 */
  SimpleNode jjtn000 = new SimpleNode(JJTREP2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) REP2 */
        try {
/*@egen*/
	<reproduccion> <igual> TIPO_BOOL()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

void activarMultimedia():{/*@bgen(jjtree) activarMultimedia */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIVARMULTIMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) activarMultimedia */
try {
/*@egen*/
TIPO_BOOL()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TIPO_BOOL()         : {/*@bgen(jjtree) tipoBool */
                            SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) tipoBool */
         try {
/*@egen*/
	 t= <verdadero>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }
	| t=<falso>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }
	| t=<NUM>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

void Cadena():{/*@bgen(jjtree) Cadena */
  SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Cadena */
   try {
/*@egen*/
   Cad()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Cad()           :{/*@bgen(jjtree) tipoCadena */
                       SimpleNode jjtn000 = new SimpleNode(JJTTIPOCADENA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) tipoCadena */
   try {
/*@egen*/
   t= <CADENA>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}



/*------------------------------------ CONFIGURACIONES -----------------------------------*/


void ENCABEZADO_C()               :{/*@bgen(jjtree) Encabezado_Val */
                                    SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
   try {
/*@egen*/
   t=<configuraciones>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000.setName(t.image); }
   | t=<configuraciones2>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void CONFIGURACION():{/*@bgen(jjtree) CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTCONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CONFIGURACION */
  try {
/*@egen*/
  ENCABEZADO_C() LISTA_CONFIGURACIONES()  ENCABEZADO_C()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void LISTA_CONFIGURACIONES():{/*@bgen(jjtree) LISTA_CONFIGURACIONES */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_CONFIGURACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LISTA_CONFIGURACIONES */
  try {
/*@egen*/
  ( ELEMENTO_CONFIGURACION())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ELEMENTO_CONFIGURACION():{/*@bgen(jjtree) ELEMENTO_CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENTO_CONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ELEMENTO_CONFIGURACION */
  try {
/*@egen*/
  tENCABEZADO_CONFI() L_OP_CONFIGURACION() tENCABEZADO_CONFI()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tENCABEZADO_CONFI()               :{/*@bgen(jjtree) Encabezado_Val */
                                         SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO_VAL);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Encabezado_Val */
    try {
/*@egen*/
    t= <confi>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName(t.image); }
   |t=<confi2>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void L_OP_CONFIGURACION():{/*@bgen(jjtree) L_OP_CONFIGURACION */
  SimpleNode jjtn000 = new SimpleNode(JJTL_OP_CONFIGURACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) L_OP_CONFIGURACION */
  try {
/*@egen*/
  (OP_CONFIGURACION())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OP_CONFIGURACION()     :{}{
  idForm()
  |Estilo()
  |titulo_formulario()
  |importar()
  |codigo_global()
  |codigo_principal()
}


void idForm():{/*@bgen(jjtree) idForm */
  SimpleNode jjtn000 = new SimpleNode(JJTIDFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) idForm */
try {
/*@egen*/
<idform> (identificador())? <idform2>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Estilo():{/*@bgen(jjtree) Estilo */
  SimpleNode jjtn000 = new SimpleNode(JJTESTILO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Estilo */
 try {
/*@egen*/
 <estilo> (tipoEstilo())? <estilo2>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void titulo_formulario():{/*@bgen(jjtree) titulo_formulario */
  SimpleNode jjtn000 = new SimpleNode(JJTTITULO_FORMULARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) titulo_formulario */
try {
/*@egen*/
tituloForm()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void importar():{/*@bgen(jjtree) importar */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) importar */
try {
/*@egen*/
importarConf()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void codigo_principal():{/*@bgen(jjtree) codigo_principal */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_PRINCIPAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) codigo_principal */
try {
/*@egen*/
codPrincipal()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void codPrincipal()             :{/*@bgen(jjtree) codPrincipal */
                                  SimpleNode jjtn000 = new SimpleNode(JJTCODPRINCIPAL);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) codPrincipal */
        try {
/*@egen*/
	t=<codigo_principal>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{ jjtn000.setName(t.image.replace("<codigo_principal>","").replace("</codigo_principal>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void codigo_global():{/*@bgen(jjtree) codigo_global */
  SimpleNode jjtn000 = new SimpleNode(JJTCODIGO_GLOBAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) codigo_global */
try {
/*@egen*/
codGlobal()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void codGlobal()          :{/*@bgen(jjtree) codGlobal */
                            SimpleNode jjtn000 = new SimpleNode(JJTCODGLOBAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) codGlobal */
        try {
/*@egen*/
	t=<codigo_global>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{ jjtn000.setName(t.image.replace("<codigo_global>","").replace("</codigo_global>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void importarConf()             :{/*@bgen(jjtree) importarConf */
                                  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTARCONF);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) importarConf */
        try {
/*@egen*/
	t=<importar>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{ jjtn000.setName(t.image.replace("<importar>","").replace("</importar>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void tituloForm()           :{/*@bgen(jjtree) tituloForm */
                              SimpleNode jjtn000 = new SimpleNode(JJTTITULOFORM);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) tituloForm */
        try {
/*@egen*/
	t=<titulo_formulario>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{ jjtn000.setName(t.image.replace("<titulo_formulario>","").replace("</titulo_formulario>",""));jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void idFormConf()       :{/*@bgen(jjtree) idForm */
                          SimpleNode jjtn000 = new SimpleNode(JJTIDFORM);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) idForm */
   try {
/*@egen*/
   <idform> (identificador())? <idform2>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void tipoEstilo()           :{/*@bgen(jjtree) tipoEstilo */
                              SimpleNode jjtn000 = new SimpleNode(JJTTIPOESTILO);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) tipoEstilo */
  try {
/*@egen*/
  t=<pagina>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }
  |t=<todo>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }
  |t=<cuadricula>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{ jjtn000.setName(t.image);jjtn000.setPos(t.beginLine, t.beginColumn); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}