/* analizador.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. analizador.java */
package Analizador;
import java.io.*;

public class analizador/*@bgen(jjtree)*/implements analizadorTreeConstants, analizadorConstants {/*@bgen(jjtree)*/
  protected JJTanalizadorState jjtree = new JJTanalizadorState();

  final public SimpleNode Start() throws ParseException {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Inicio();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Inicio() throws ParseException {/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TAG_ABRE();
      TAG_CIERRA();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void TAG_ABRE() throws ParseException {/*@bgen(jjtree) TAG_ABRE */
  SimpleNode jjtn000 = new SimpleNode(JJTTAG_ABRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(menor);
      ENCABEZADO();
      jj_consume_token(mayor);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void TAG_CIERRA() throws ParseException {/*@bgen(jjtree) TAG_CIERRA */
  SimpleNode jjtn000 = new SimpleNode(JJTTAG_CIERRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(menor);
      jj_consume_token(division);
      ENCABEZADO();
      jj_consume_token(mayor);
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ENCABEZADO() throws ParseException {/*@bgen(jjtree) Encabezado */
                              SimpleNode jjtn000 = new SimpleNode(JJTENCABEZADO);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tipoC:{
        t = jj_consume_token(tipoC);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case idPreguntaC:{
        t = jj_consume_token(idPreguntaC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case etiquetaC:{
        t = jj_consume_token(etiquetaC);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case sugerirC:{
        t = jj_consume_token(sugerirC);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case codigo_preC:{
        t = jj_consume_token(codigo_preC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case codigo_postC:{
        t = jj_consume_token(codigo_postC);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case restringirC:{
        t = jj_consume_token(restringirC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case restringirMsnC:{
        t = jj_consume_token(restringirMsnC);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case predeterminadoC:{
        t = jj_consume_token(predeterminadoC);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case aplicableC:{
        t = jj_consume_token(aplicableC);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case lecturaC:{
        t = jj_consume_token(lecturaC);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case calculoC:{
        t = jj_consume_token(calculoC);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case repeticionC:{
        t = jj_consume_token(repeticionC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case multimediaC:{
        t = jj_consume_token(multimediaC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case aparienciaC:{
        t = jj_consume_token(aparienciaC);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case parametroC:{
        t = jj_consume_token(parametroC);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffff000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,};
   }

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
