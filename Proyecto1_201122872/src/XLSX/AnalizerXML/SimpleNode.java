/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package XLSX.AnalizerXML;

import XLSX.Forms.ConfigurationBase;
import XLSX.Forms.OptionBase;
import XLSX.Forms.QuestionBase;
import java.util.ArrayList;
import java.util.List;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected grammarXLSX parser;
  protected String name;
  private List<QuestionBase> questions;
  private List<OptionBase>options;
  private List<ConfigurationBase>configurations;
  

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(grammarXLSX p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

 // public String toString() { return grammarXLSXTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    this.configurations= new ArrayList<>();
    this.options= new ArrayList<>();
    this.questions= new ArrayList<>();
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
         if (n != null) {
            if (n.toString().equals("CREAR")) {
                //System.out.println("REsultado:\n " +crear_objetos_usql((SimpleNode)n.jjtGetChild(0)).getXML());
                        
            }
                   n.dump(prefix + " ");
                  
                }
      }
    }
  }
  
  
  private void createQuestion (SimpleNode nodeQuestion){
      
  }
  
  
  private void createConfiguration (SimpleNode nodeConf){
      
  }
  
  
  private void createOption (SimpleNode nodeOption){
      
  }
  
  
  public void setName(String s) {
        this.name = s;
    }

    public String getName() {
        return this.name;
    }

    @Override
    public String toString() {
        if (name != null) {
            return name;
        } else {
            return grammarXLSXTreeConstants.jjtNodeName[id];
        }
    }
}

/* JavaCC - OriginalChecksum=614bd1fd146bf1360071e8eb7bbcb58e (do not edit this line) */
