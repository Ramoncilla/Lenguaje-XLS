/* analizadorTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. analizadorTokenManager.java */
package Analizador;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class analizadorTokenManager implements analizadorConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff000L) != 0L)
         {
            jjmatchedKind = 56;
            return 9;
         }
         if ((active0 & 0x600000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0xffff000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 9;
         }
         return -1;
      case 2:
         if ((active0 & 0xffff000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
            return 9;
         }
         return -1;
      case 3:
         if ((active0 & 0xfffe000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x1000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0xfffe000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 9;
         }
         return -1;
      case 5:
         if ((active0 & 0xfffe000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 9;
         }
         return -1;
      case 6:
         if ((active0 & 0xf3f6000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0xc08000L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0xf3f2000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x4000L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0x71f2000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x8200000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x120000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 9;
            }
            return 9;
         }
         if ((active0 & 0x70d2000L) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0x20000L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 11;
            return 9;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
            return 9;
         }
         if ((active0 & 0x80000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 33:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xa0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStopAtPos(0, 41);
      case 43:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 46:
         return jjStopAtPos(0, 48);
      case 47:
         return jjStopAtPos(0, 42);
      case 48:
         return jjStartNfaWithStates_0(0, 53, 15);
      case 49:
         return jjStartNfaWithStates_0(0, 53, 15);
      case 58:
         return jjStopAtPos(0, 44);
      case 59:
         return jjStopAtPos(0, 49);
      case 60:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 62:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 94:
         return jjStopAtPos(0, 43);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4200000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x830000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8100000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10c0000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 123:
         return jjStopAtPos(0, 50);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 125:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 35:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 36:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 38:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 43:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 45:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x14c0000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000L);
      case 124:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a00000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x230000L);
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 9);
         break;
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4002000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x24c0000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x102000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc8000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xc04000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc004000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10c8000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000L);
      case 97:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 9);
         break;
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40c0000L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 9);
         break;
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8004000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 9);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x60c0000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x1020000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 9);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 9);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 9);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 9);
         break;
      case 114:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 17, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 19, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x4L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 39)
                     { jjAddStates(3, 4); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(14); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(13); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 3:
                  if (curChar == 39)
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39 && kind > 55)
                     kind = 55;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(13); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(14); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(9); }
                  break;
               case 1:
                  { jjAddStates(5, 6); }
                  break;
               case 4:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               case 6:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   11, 12, 14, 4, 7, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\164\151\160\157", "\151\144\120\162\145\147\165\156\164\141", 
"\145\164\151\161\165\145\164\141", "\163\165\147\145\162\151\162", "\143\157\144\151\147\157\137\160\162\145", 
"\143\157\144\151\147\157\137\160\157\163\164", "\162\145\163\164\162\151\156\147\151\162", 
"\162\145\163\164\162\151\156\147\151\162\115\163\156", "\160\162\145\144\145\164\145\162\155\151\156\141\144\157", 
"\141\160\154\151\143\141\142\154\145", "\154\145\143\164\165\162\141", "\143\141\154\143\165\154\157", 
"\162\145\160\145\164\151\143\151\157\156", "\155\165\154\164\151\155\145\144\151\141", 
"\141\160\141\162\151\145\156\143\151\141", "\160\141\162\141\155\145\164\162\157", "\74\75", "\76\75", "\74", "\76", 
"\75\75", "\41\75", "\174\174", "\46\46", "\41", "\55\55", "\53\53", "\53", "\55", 
"\52", "\57", "\136", "\72", "\50", "\51", "\54", "\56", "\73", "\173", "\175", null, 
null, null, null, null, "\61", "\60", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public analizadorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public analizadorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "COMMENT2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffff001L, 
};
static final long[] jjtoSkip = {
   0x5feL, 
};
static final long[] jjtoMore = {
   0xa00L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[15];
    private final int[] jjstateSet = new int[2 * 15];

    
    protected char curChar;
}
