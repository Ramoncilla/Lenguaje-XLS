/* grammarXLSXTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. grammarXLSXTokenManager.java */
package XLSX.AnalizerXML;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
@SuppressWarnings("unused")public class grammarXLSXTokenManager implements grammarXLSXConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x3fffffffc00000L) != 0L || (active2 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 191;
            return 1;
         }
         if ((active2 & 0x4800000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active1 & 0x3fffffffc00000L) != 0L || (active2 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active1 & 0x200000000L) != 0L || (active2 & 0x60000000000L) != 0L)
            return 1;
         if ((active1 & 0x3ffffdffc00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active1 & 0x2102000000000L) != 0L)
            return 1;
         if ((active1 & 0x3defddffc00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active1 & 0x10648404000000L) != 0L)
            return 1;
         if ((active1 & 0x2d8b59fbc00000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active1 & 0x11100000000L) != 0L)
            return 1;
         if ((active1 & 0x2dca48fbc00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active1 & 0x4020070000000L) != 0L)
            return 1;
         if ((active1 & 0x29c8488bc00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active1 & 0x21c8408bc00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active1 & 0x8000800000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active1 & 0x21804009c00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active1 & 0x480082000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active1 & 0x1800009c00000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active1 & 0x20004000000000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active1 & 0x1800008400000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active1 & 0x1800000L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active1 & 0x1800000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active1 & 0x8400000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active1 & 0x1800000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active1 & 0x800000000000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xa0L, 0x0L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000L);
      case 40:
         return jjStopAtPos(0, 179);
      case 41:
         return jjStopAtPos(0, 180);
      case 42:
         return jjStopAtPos(0, 167);
      case 43:
         jjmatchedKind = 165;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
      case 44:
         return jjStopAtPos(0, 182);
      case 45:
         jjmatchedKind = 166;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 46:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000L);
      case 47:
         return jjStopAtPos(0, 168);
      case 58:
         return jjStopAtPos(0, 181);
      case 59:
         return jjStopAtPos(0, 183);
      case 60:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x7e000fff000L, 0xffc0000000000000L, 0x3fffffffL);
      case 61:
         jjmatchedKind = 175;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L);
      case 62:
         jjmatchedKind = 160;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 63:
         return jjStopAtPos(0, 188);
      case 64:
         return jjStopAtPos(0, 178);
      case 91:
         return jjStopAtPos(0, 186);
      case 93:
         return jjStopAtPos(0, 187);
      case 94:
         return jjStopAtPos(0, 171);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18084830000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x40000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4600084000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00000L, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40008000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800400000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x202000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 184);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
      case 125:
         return jjStopAtPos(0, 185);
      case 194:
      case 226:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6000000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 35:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 36:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 38:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      case 43:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 45:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 46:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 176);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xce00000000000000L, active2, 0x1fff2719L);
      case 61:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x8041834000000L, active2, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800030c000L, active1, 0x100000000000000L, active2, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0x1e2800bc00000L, active2, 0x24L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x14000480000000L, active2, 0x40000001002L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0x1000010040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x42182000000000L, active2, 0x20000000040L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x80000100000000L, active2, 0x8000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x32000030000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L, active2, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 124:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         break;
      case 161:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 190);
         break;
      case 191:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x4000000000L, active2, 0x9008000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x814620100000000L, active2, 0x2180400L);
      case 68:
      case 100:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 169, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2831c00000L, active2, 0x1002L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x72000030000L, active1, 0x8000000000000000L, active2, 0x110L);
      case 70:
      case 102:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 1);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x40000000L, active2, 0x20808L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9800004000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L, active2, 0x1L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000c0080000000L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0c000L, active1, 0x1300000000000000L, active2, 0x280L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x440000008000000L, active2, 0x10804040L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0xa0100002000000L, active2, 0x4602000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40004L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x2010000000000L, active2, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x2000000000000000L, active2, 0L);
      case 86:
      case 118:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 170, 1);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x830000000L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 1);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0x12004000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x8000040000000L, active2, 0x60L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x30c000L, active1, 0x84002000000L, active2, 0x20008L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0x81810000000000L, active2, 0x4602000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x40000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4600000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0x21101c00000L, active2, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L, active1, 0x2010000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x1000000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000400000000L, active2, 0x180L);
      case 79:
      case 111:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4800000000000000L, active2, 0x180400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000080000L, active1, 0x200000000000000L, active2, 0x9001a00L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000020000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000008000000L, active2, 0x808000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000010000L, active1, 0x4000000L, active2, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x8040008000000000L, active2, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0x40001L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 118);
         break;
      case 65:
      case 97:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400003c00000L, active2, 0x8008000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x1000000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x1800000000000L, active2, 0x300L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L, active2, 0x180000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000002000L, active1, 0x404000000000000L, active2, 0x800000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000800000000L, active2, 0x88L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400030c000L, active1, 0x8000080040000000L, active2, 0x44L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0x3000001L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000020030000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800001000000000L, active2, 0x400L);
      case 79:
      case 111:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 1);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 1);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 1);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 1);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0x108000000L, active2, 0x802L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0x4030000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L, active2, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x14000000000L, active2, 0x10005000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x600000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000010000L, active1, 0x2200000000000000L, active2, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000420000L, active1, 0x8000000000000L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 119);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 121);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(5, 139);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1c00000L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20020060000000L, active2, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x1880000000000L, active2, 0x2000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa000000L, active2, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000060000L, active1, 0L, active2, 0x4041020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x30c000L, active1, 0x400000000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2100004890000000L, active2, 0x1184290L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x8000000000000L, active2, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 78:
      case 110:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 1);
         break;
      case 79:
      case 111:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10048L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000892000L, active1, 0x1004000000000000L, active2, 0x8020002L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0x600001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000001000L, active1, 0L, active2, 0x2100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 120);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 122);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(6, 144);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x8000000800000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20004000000000L, active2, 0x1000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x801000L, active1, 0x1000000002000000L, active2, 0x82e100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x181080L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000012000L, active1, 0x801880000400000L, active2, 0x8000401L);
      case 76:
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x800000000L, active2, 0x10L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10000002L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 79:
      case 111:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x70c000L, active1, 0x400000000000L, active2, 0x204L);
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000020000L, active1, 0x4000000000000000L, active2, 0x640008L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000L, active1, 0L, active2, 0x4000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000008000000L, active2, 0x2000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 1);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(7, 124);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(7, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(7, 130);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0xf0c000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 99, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000080000L, active1, 0x80000000L, active2, 0x1000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x8000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0xe000000000000000L, active2, 0x18000040L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000020000L, active1, 0x20000001000000L, active2, 0x4640000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0x9L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000010000L, active1, 0L, active2, 0x4200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x1880000000000L, active2, 0x180010L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0x400002000000L, active2, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L, active2, 0x808020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000800000L, active2, 0x1080L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 126);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(8, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(8, 132);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x180000L);
      case 65:
      case 97:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0x400000L, active2, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L, active2, 0x4004000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000020000L, active1, 0x2000000001800000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800201L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000210000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L, active2, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000800000L, active1, 0x4000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1800000000000L, active2, 0x8601000L);
      case 79:
      case 111:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0x2000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x10c000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000L, active1, 0L, active2, 0x48080L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x10000100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(9, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(9, 134);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(9, 146);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(9, 153);
         break;
      case 65:
      case 97:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8001800000000000L, active2, 0x180L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2001L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0x1000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L, active2, 0x600000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000810000L, active1, 0x2000000008800000L, active2, 0x4004000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L, active2, 0x1000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 117, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000428000L, active1, 0L, active2, 0x8000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x180000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x104000L, active1, 0L, active2, 0x10800400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(10, 41);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(10, 127);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(10, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(10, 137);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(10, 143);
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1800000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x5400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L, active1, 0x400000L, active2, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x140000L, active1, 0L, active2, 0x8600001L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L, active1, 0L, active2, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 87, 1);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 88, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0x8000000L, active2, 0x14102000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000410000L, active1, 0L, active2, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x808000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(11, 37);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(11, 40);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(11, 125);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(11, 140);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(11, 142);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 152);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(11, 156);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8020001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x800080L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x410000L, active1, 0x1000000000000L, active2, 0x2000L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 86, 1);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 91, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x140000L, active1, 0L, active2, 0x4000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x600000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0L, active2, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x808000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(12, 15);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(12, 128);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(12, 145);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(12, 147);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(12, 149);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(12, 155);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0xa40000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active1, 0x800000000000L, active2, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L, active1, 0L, active2, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(13, 17);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(13, 23);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(13, 148);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x600000L, active1, 0x1000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L, active1, 0L, active2, 0x2080L);
      case 79:
      case 111:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 111, 1);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(14, 16);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(14, 21);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(14, 135);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(14, 141);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x400400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(15, 18);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(15, 138);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(15, 150);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(16, 151);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(17, 20);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(18, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 112, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x400000004L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 192)
                        kind = 192;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 197)
                        kind = 197;
                     { jjCheckNAddTwoStates(15, 19); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 39)
                     { jjAddStates(0, 1); }
                  else if (curChar == 45)
                     { jjCheckNAdd(3); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 192)
                     kind = 192;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 46)
                     { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 192)
                     kind = 192;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar == 39)
                     { jjAddStates(0, 1); }
                  break;
               case 7:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 39 && kind > 193)
                     kind = 193;
                  break;
               case 11:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 34 && kind > 195)
                     kind = 195;
                  break;
               case 14:
                  if (curChar != 35)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAddTwoStates(15, 19); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(2, 3); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(1); }
                  break;
               case 7:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  { jjAddStates(4, 5); }
                  break;
               case 15:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 93 && kind > 194)
                     kind = 194;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x12000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc0000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xc0000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0xc0000000000000L) != 0L)
            return 10;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 78);
      case 10:
         return jjStopAtPos(0, 77);
      case 13:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_4(0x0L, 0x8000L);
      case 32:
         return jjStopAtPos(0, 75);
      case 33:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_4(0x1000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_4(0x400000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 64);
      case 41:
         return jjStopAtPos(0, 65);
      case 42:
         return jjStopAtPos(0, 53);
      case 43:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_4(0x4000000000000L, 0x0L);
      case 45:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_4(0x2000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_4(0x2000000000000000L, 0x0L);
      case 60:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_4(0x80000000000L, 0x3f0000L);
      case 61:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_4(0x800000000000L, 0x0L);
      case 62:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_4(0x100000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 63);
      case 94:
         return jjStopAtPos(0, 56);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_4(0x80000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_4(0x40000000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_4(0x200000000000000L, 0x0L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 38:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 43:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 45:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active1, 0x3f0000L);
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x40000000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x40000L);
      case 68:
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 54, 10);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_4(active0, 0L, active1, 0x190000L);
      case 86:
      case 118:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 55, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_4(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_4(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_4(active1, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_4(active1, 0x390000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_4(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_4(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_4(active1, 0x200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_4(active1, 0x60000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_4(active1, 0x80000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_4(active1, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_4(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_4(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_4(active1, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_4(active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_4(active1, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_4(active1, 0x210000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_4(active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_4(active1, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_4(active1, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_4(active1, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_4(active1, 0x80000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_4(active1, 0x240000L);
      default :
         break;
   }
   return jjStartNfa_4(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_4(active1, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_4(active1, 0x90000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_4(active1, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_4(active1, 0x300000L);
      default :
         break;
   }
   return jjStartNfa_4(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_4(active1, 0x200000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_4(active1, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_4(active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_4(active1, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_4(active1, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_4(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_4(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(9, 82);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(9, 85);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_4(active1, 0x100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_4(active1, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_4(active1, 0x80000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_4(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_4(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_4(active1, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_4(active1, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_4(active1, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_4(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(11, 81);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(11, 84);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_4(active1, 0x80000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_4(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_4(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_4(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(12, 80);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(12, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_4(11, 0L, active1);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 72)
                        kind = 72;
                     { jjCheckNAddTwoStates(15, 19); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 39)
                     { jjAddStates(6, 7); }
                  else if (curChar == 45)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 46)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar == 39)
                     { jjAddStates(6, 7); }
                  break;
               case 5:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 39 && kind > 67)
                     kind = 67;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 14:
                  if (curChar != 35)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddTwoStates(15, 19); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(2, 3); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAdd(19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(10); }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(10); }
                  break;
               case 12:
                  { jjAddStates(4, 5); }
                  break;
               case 15:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 93 && kind > 68)
                     kind = 68;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_3(0xfff000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_3(active0, 0xfff000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x30c000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x80000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_3(active0, 0x30000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_3(active0, 0x400000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_3(active0, 0x30000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x400000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_3(active0, 0xb0c000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_3(active0, 0x30c000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_3(active0, 0x40000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_3(active0, 0x800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_3(active0, 0x80000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_3(active0, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_3(active0, 0x10000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_3(active0, 0x400000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_3(active0, 0x800000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_3(active0, 0x40000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_3(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x30c000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_3(active0, 0x80000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_3(active0, 0x10000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_3(active0, 0x420000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_3(active0, 0x60000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_3(active0, 0x30c000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_3(active0, 0x400000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_3(active0, 0x892000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_3(active0, 0x801000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_3(active0, 0x12000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_3(active0, 0x70c000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_3(active0, 0x20000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_3(active0, 0xc0000000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_3(active0, 0xf0c000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_3(active0, 0x80000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_3(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0x20000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_3(active0, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_3(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_3(active0, 0x1000000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(9, 25);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_3(active0, 0x1000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_3(active0, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_3(active0, 0x400000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_3(active0, 0x210000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_3(active0, 0x800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_3(active0, 0x10c000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_3(active0, 0xc0000000L);
      default :
         return 10;
   }
   return 10;
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 31);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_3(active0, 0x810000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_3(active0, 0x200000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_3(active0, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_3(active0, 0x428000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_3(active0, 0x104000000L);
      default :
         return 11;
   }
   return 11;
}
private int jjMoveStringLiteralDfa11_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_3(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_3(active0, 0x140000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_3(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_3(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_3(active0, 0x410000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_3(active0, 0x808000000L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 26);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_3(active0, 0x200000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_3(active0, 0x410000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_3(active0, 0x140000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_3(active0, 0x20000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_3(active0, 0x808000000L);
      default :
         return 13;
   }
   return 13;
}
private int jjMoveStringLiteralDfa13_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 27);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_3(active0, 0xa40000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_3(active0, 0x100000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_3(active0, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_3(active0, 0x10000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_3(active0, 0x400000000L);
      default :
         return 14;
   }
   return 14;
}
private int jjMoveStringLiteralDfa14_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(14, 29);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_3(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_3(active0, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_3(active0, 0x600000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_3(active0, 0x10000000L);
      default :
         return 15;
   }
   return 15;
}
private int jjMoveStringLiteralDfa15_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(15, 28);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(15, 33);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_3(active0, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_3(active0, 0x40000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_3(active0, 0x100000000L);
      default :
         return 16;
   }
   return 16;
}
private int jjMoveStringLiteralDfa16_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(16, 30);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_3(active0, 0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_3(active0, 0x400000000L);
      default :
         return 17;
   }
   return 17;
}
private int jjMoveStringLiteralDfa17_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_3(active0, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_3(active0, 0x100000000L);
      default :
         return 18;
   }
}
private int jjMoveStringLiteralDfa18_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(18, 32);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_3(active0, 0x400000000L);
      default :
         return 19;
   }
   return 19;
}
private int jjMoveStringLiteralDfa19_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(19, 34);
         break;
      default :
         return 20;
   }
   return 20;
}
static final int[] jjnextStates = {
   7, 10, 17, 18, 12, 13, 5, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\74\75", "\76\75", "\74", "\76", "\75\75", "\41\75", 
"\55\55", "\53\53", "\53", "\55", "\52", "\57", null, null, "\136", "\174\174", 
"\46\46", "\41", "\75", "\56\56", "\56", "\100", "\50", "\51", "\72", "\54", "\73", 
"\173", "\175", "\133", "\135", "\77", null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 36)
         {
            jjmatchedKind = 36;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 54 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  int toktam = lengthOfMatch; image.replace(image.length()-toktam,image.length(),"%");
         break;
      case 55 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                int toktam2 = lengthOfMatch; image.replace(image.length()-toktam2,image.length(),"/");
         break;
      case 62 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                              int toktam3 = lengthOfMatch; image.replace(image.length()-toktam3,image.length(),"param_1");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 80 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        matchedToken.image=image.toString();
         break;
      case 81 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        matchedToken.image=image.toString();
         break;
      case 82 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    matchedToken.image=image.toString();
         break;
      case 83 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          matchedToken.image=image.toString();
         break;
      case 84 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        matchedToken.image=image.toString();
         break;
      case 85 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    matchedToken.image=image.toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public grammarXLSXTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public grammarXLSXTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "COMMENT2",
   "estado2",
   "operaciones",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 2, 0, -1, 0, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfff000001L, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x2fL, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xfffffff000fffa00L, 0xf97fL, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[20];
    private final int[] jjstateSet = new int[2 * 20];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
