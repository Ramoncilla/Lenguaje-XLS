/* Generated By:JJTree&JavaCC: Do not edit this line. grammarXLSXTokenManager.java */
package XLSX.AnalizerXML;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class grammarXLSXTokenManager implements grammarXLSXConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1800000000000000L) != 0L)
         {
            jjmatchedKind = 79;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1800000000000000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0x1800000000000000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xa0L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 64);
      case 41:
         return jjStopAtPos(0, 65);
      case 42:
         return jjStopAtPos(0, 57);
      case 43:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 66);
      case 45:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 47:
         return jjStopAtPos(0, 58);
      case 58:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 69);
      case 60:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x1ffffffff000L, 0x0L);
      case 61:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 74);
      case 91:
         return jjStopAtPos(0, 72);
      case 93:
         return jjStopAtPos(0, 73);
      case 94:
         return jjStopAtPos(0, 61);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 70);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 35:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 36:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 38:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 43:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 45:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 46:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xffff0000000L, active1, 0L);
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x830000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c0000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 124:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x42008800000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8300000000L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x414c0000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x81004200000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10c00100000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10004000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000L);
      case 118:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x88004000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20030000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x14c00100000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2a00000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x42001001000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40008000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000800000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x300100000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1001008000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40230000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2a000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000000L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80004002000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x24c0000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000200000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x10080102000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2306000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400200c8000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x24c01000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0xc04000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x102c004000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x300002000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x600010c8000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80002000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0xc80400000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000100000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0xc040000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000400000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0042100000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10c80000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x40c0000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x300800000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000008000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1008004000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000004000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x10004000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x21000000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40c00002000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x88100000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x80040000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(9, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(9, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0xc00000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100060c0000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x9020000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x81000010000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(10, 21);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x6002000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000010000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x60c00100000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x90200000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000c0000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(11, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(11, 18);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(11, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(11, 26);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(11, 37);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(11, 43);
         break;
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x60020000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000100000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0xc00000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(12, 17);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(12, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(12, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(12, 34);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(12, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(12, 42);
         break;
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(13, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(14, 19);
         break;
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(15, 20);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(15, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(16, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 77)
                     kind = 77;
                  break;
               case 3:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  jjAddStates(3, 4);
                  break;
               case 4:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   9, 10, 12, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\74\164\151\160\157\76", "\74\151\144\120\162\145\147\165\156\164\141\76", 
"\74\145\164\151\161\165\145\164\141\76", "\74\163\165\147\145\162\151\162\76", 
"\74\143\157\144\151\147\157\137\160\162\145\76", "\74\143\157\144\151\147\157\137\160\157\163\164\76", 
"\74\162\145\163\164\162\151\156\147\151\162\76", "\74\162\145\163\164\162\151\156\147\151\162\115\163\156\76", 
"\74\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", "\74\141\160\154\151\143\141\142\154\145\76", 
"\74\154\145\143\164\165\162\141\76", "\74\143\141\154\143\165\154\157\76", 
"\74\162\145\160\145\164\151\143\151\157\156\76", "\74\155\165\154\164\151\155\145\144\151\141\76", 
"\74\141\160\141\162\151\145\156\143\151\141\76", "\74\160\141\162\141\155\145\164\162\157\76", "\74\57\164\151\160\157\76", 
"\74\57\151\144\120\162\145\147\165\156\164\141\76", "\74\57\145\164\151\161\165\145\164\141\76", 
"\74\57\163\165\147\145\162\151\162\76", "\74\57\143\157\144\151\147\157\137\160\162\145\76", 
"\74\57\143\157\144\151\147\157\137\160\157\163\164\76", "\74\57\162\145\163\164\162\151\156\147\151\162\76", 
"\74\57\162\145\163\164\162\151\156\147\151\162\115\163\156\76", "\74\57\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", 
"\74\57\141\160\154\151\143\141\142\154\145\76", "\74\57\154\145\143\164\165\162\141\76", 
"\74\57\143\141\154\143\165\154\157\76", "\74\57\162\145\160\145\164\151\143\151\157\156\76", 
"\74\57\155\165\154\164\151\155\145\144\151\141\76", "\74\57\141\160\141\162\151\145\156\143\151\141\76", 
"\74\57\160\141\162\141\155\145\164\162\157\76", "\74\75", "\76\75", "\74", "\76", "\75\75", "\41\75", "\174\174", "\46\46", 
"\41", "\55\55", "\53\53", "\53", "\55", "\52", "\57", "\155\157\144", 
"\144\151\166", "\136", "\75", "\72", "\50", "\51", "\54", "\56\56", "\56", "\73", "\173", 
"\175", "\133", "\135", "\100", null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "COMMENT2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xffffL, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x0L, 
};
static final long[] jjtoMore = {
   0xa00L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[13];
private final int[] jjstateSet = new int[26];
protected char curChar;
/** Constructor. */
public grammarXLSXTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public grammarXLSXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
