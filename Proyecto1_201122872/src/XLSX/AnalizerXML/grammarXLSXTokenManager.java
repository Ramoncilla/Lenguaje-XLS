/* grammarXLSXTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. grammarXLSXTokenManager.java */
package XLSX.AnalizerXML;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
@SuppressWarnings("unused")public class grammarXLSXTokenManager implements grammarXLSXConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 11;
         }
         return -1;
      case 1:
         if ((active1 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 11;
         }
         return -1;
      case 2:
         if ((active1 & 0x18000000L) != 0L)
            return 11;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xa0L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         return jjStopAtPos(0, 89);
      case 43:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 46:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 47:
         return jjStopAtPos(0, 90);
      case 58:
         return jjStopAtPos(0, 95);
      case 59:
         return jjStopAtPos(0, 101);
      case 60:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0xfffffffffffff000L, 0x1fffL);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 62:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 63:
         return jjStopAtPos(0, 107);
      case 64:
         return jjStopAtPos(0, 106);
      case 91:
         return jjStopAtPos(0, 104);
      case 93:
         return jjStopAtPos(0, 105);
      case 94:
         return jjStopAtPos(0, 93);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 123:
         return jjStopAtPos(0, 102);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 125:
         return jjStopAtPos(0, 103);
      case 194:
      case 226:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 35:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 36:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 38:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 46:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0030e3f03c38000L, active1, 0xfffL);
      case 61:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4180100c0004000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4010100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200028000000L, active1, 0x10000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000001000L, active1, 0x8000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000000002000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x860c00000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100004000000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 161:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 191:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400000000000000L, active1, 0x440L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x83000020000L, active1, 0x106L);
      case 68:
      case 100:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 11);
         return jjMoveStringLiteralDfa3_0(active0, 0x200008000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa60c20401000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000100a04000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c00000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180500c00cc000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100008000011000L, active1, 0x820L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x83000000002000L, active1, 0x218L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000100100000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000200000L, active1, 0L);
      case 86:
      case 118:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x900L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000c000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80180002c0000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x83000000002000L, active1, 0x298L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000100100000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000200000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000c0000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000004000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x83000c20000L, active1, 0x6L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800340020008000L, active1, 0x440L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000010000L, active1, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000400000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x15001000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400060000000000L, active1, 0x80L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80003000000000L, active1, 0x6L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x804000000010000L, active1, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x10200004000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1180080d1000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x140L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000020000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100028000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000800000000L, active1, 0x200L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000100000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000200000000000L, active1, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x260000500208000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xc04004000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x100L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80e04000000000L, active1, 0x201L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000020000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000c0010000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000053400204000L, active1, 0x46L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000008a00000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80640000280c0000L, active1, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000002000000L, active1, 0x98L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x603020100100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xb0030200001c0000L, active1, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x213000000000L, active1, 0x6L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x864080002020000L, active1, 0x400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000500000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x8200000L, active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x180400d4000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200c00a00c00000L, active1, 0x19L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000020000000L, active1, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x180L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(7, 17);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000c4040000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000020000000L, active1, 0x40L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80008001e00000L, active1, 0xc00L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000080000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000000000L, active1, 0x219L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x202000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1060040000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400003500000000L, active1, 0x6L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x7000000000000L, active1, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000004800100000L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 50);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(8, 58);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x3100400000L, active1, 0x6L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4800100000L, active1, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000200000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x40002000000L, active1, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000080000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x803000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000040000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0x418L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2080010020000000L, active1, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20001000000L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000080000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(9, 20);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 29);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(9, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(9, 39);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(9, 64);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(9, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(9, 72);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x30001000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000002000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000040000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0x18L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1060000000240000L, active1, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x80400000L, active1, 0x40L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x80001000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2810c00004000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8080800000000L, active1, 0x820L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(10, 35);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(10, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(10, 42);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(10, 46);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(10, 56);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(10, 61);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000280000200000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8001000000000L, active1, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000002400000L, active1, 0x418L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0x20L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000040000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000180000000L, active1, 0xa04L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000004000000L, active1, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000040000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(11, 21);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(11, 48);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(11, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(11, 53);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(11, 60);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(11, 70);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(11, 75);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000002000000L, active1, 0x400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0x20L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x42000004000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80001000000000L, active1, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0x18L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000400000L, active1, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000040000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(12, 30);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(12, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(12, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(12, 65);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(12, 67);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(12, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(12, 74);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000080040000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x42000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L, active1, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x1004000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(13, 18);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(13, 36);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(13, 47);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(13, 66);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000400000L, active1, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x84000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x42010000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(14, 22);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(14, 31);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(14, 40);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(14, 49);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(14, 54);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x2100000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L, active1, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(15, 37);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(15, 43);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(15, 55);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(15, 68);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(16, 69);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(18, 26);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(19, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x400000004L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 115)
                        kind = 115;
                     { jjCheckNAdd(9); }
                  }
                  else if (curChar == 39)
                     { jjAddStates(3, 4); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 3:
                  if (curChar == 39)
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0x83ff003800000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 8:
                  if (curChar != 35)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAdd(9); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 46)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(16); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(5, 6); }
                  break;
               case 4:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               case 6:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   13, 14, 16, 4, 7, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\74\75", "\76\75", "\74", "\76", 
"\75\75", "\41\75", "\174\174", "\46\46", "\41", "\55\55", "\53\53", "\53", "\55", 
"\52", "\57", null, null, "\136", "\75", "\72", "\50", "\51", "\54", "\56\56", "\56", 
"\73", "\173", "\175", "\133", "\135", "\100", "\77", null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public grammarXLSXTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public grammarXLSXTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
   "COMMENT2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x1f7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x5feL, 0x0L, 
};
static final long[] jjtoMore = {
   0xa00L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[17];
    private final int[] jjstateSet = new int[2 * 17];

    
    protected char curChar;
}
